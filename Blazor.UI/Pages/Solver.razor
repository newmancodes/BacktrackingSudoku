@page "/solver"
@using Domain;
@using System.Diagnostics

<h3>Solver</h3>

<div>
    <table>
        <tbody>
            @foreach (var row in Board.Rows)
            {
                <tr>
                    @foreach (var cell in row)
                    {
                        <td class="@cell.ValueType">
                            @if (cell.Value.HasValue)
                            {
                                @cell.Value
                            }
                            else
                            {
                                new MarkupString("&nbsp;");
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<button @onclick="Solve">Solve it</button>

<style>
    div {
        margin: 10px 10px 10px 0px;
    }
    
    table, th, td {
        border-width: 1px;
        border-style: solid;
        border-color: black;
        border-collapse: collapse;
    }

    td {
        width: 2em;
        height: 30px;
        text-align: center;
        vertical-align: middle;
    }

    .Guess {
        font-style: italic;
    }

    .Fixed {
        background-color: lightgray;
        font-weight: bolder;
    }
</style>

@code {
    protected Board Board { get; set; }

    public Solver()
    {
        Board = new Board();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Board = new Board.Builder()
            //.WithColumn(0, new Column.Builder().WithCell(1, 3).WithCell(4, 6).WithCell(5, 9).Build())
            //.WithColumn(1, new Column.Builder().WithCell(1, 5).WithCell(3, 1).WithCell(6, 2).WithCell(7, 4).WithCell(8, 8).Build())
            //.WithColumn(2, new Column.Builder().WithCell(1, 2).Build())
            //.WithColumn(3, new Column.Builder().WithCell(0, 7).WithCell(4, 3).WithCell(7, 5).Build())
            //.WithColumn(4, new Column.Builder().WithCell(0, 9).WithCell(3, 7).WithCell(5, 8).WithCell(8, 3).Build())
            //.WithColumn(5, new Column.Builder().WithCell(1, 8).WithCell(4, 1).WithCell(8, 7).Build())
            //.WithColumn(6, new Column.Builder().WithCell(7, 8).Build())
            //.WithColumn(7, new Column.Builder().WithCell(0, 5).WithCell(1, 4).WithCell(2, 8).WithCell(5, 1).WithCell(7, 9).Build())
            //.WithColumn(8, new Column.Builder().WithCell(3, 4).WithCell(4, 8).WithCell(7, 1).Build())
            .Build();
    }

    protected async Task Solve()
    {
        ICollection<IConstraint> constraints = new List<IConstraint>();
        
        // Add Tetris Sum constraints
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][0], Board[0][1], Board[0][2], Board[1][1] }, 25));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][3], Board[0][4], Board[0][5] }, 7));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][6], Board[1][6], Board[1][7], Board[2][7] }, 21));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][7], Board[0][8], Board[1][8], Board[2][8] }, 16));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[1][0], Board[2][0], Board[3][0] }, 17));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[1][2], Board[1][3], Board[1][4], Board[1][5]}, 27));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[2][1], Board[2][2], Board[2][3], Board[2][4]}, 16));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[2][5], Board[2][6] }, 15));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[3][1], Board[3][2], Board[4][2] }, 16));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[3][3], Board[4][3] }, 5));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[3][4], Board[4][4], Board[4][5], Board[5][4] }, 22));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[3][5], Board[3][6] }, 8));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[4][0], Board[5][0] }, 5));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[4][1], Board[5][1], Board[5][2], Board[6][1] }, 21));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[4][6], Board[3][7], Board[4][7], Board[3][8] }, 26));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[5][3], Board[6][3], Board[6][4], Board[7][4] }, 25));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[5][5], Board[6][5], Board[7][5] }, 8));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[5][6], Board[5][7], Board[4][8], Board[5][8] }, 17));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][0], Board[7][0], Board[7][1], Board[8][0] }, 18));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][2], Board[7][2], Board[7][3] }, 17));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][6], Board[6][7], Board[7][6], Board[7][7] }, 17));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][8], Board[7][8], Board[8][8] }, 21));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[8][1], Board[8][2] }, 7));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[8][3], Board[8][4] }, 12));
        // constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[8][5], Board[8][6], Board[8][7] }, 16));
        
        // Add "It All Hinges On This Puzzle..." Constraints - https://www.youtube.com/watch?v=sLTxD8bjC8g
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][1], Board[0][2], Board[1][2] }, 13));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[1][0], Board[2][0] }, 13));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[1][3], Board[2][3], Board[2][4] }, 24));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[0][5], Board[0][6] }, 11));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[2][8], Board[3][8] }, 12));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[3][1], Board[3][2], Board[4][2] }, 6));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[4][6], Board[5][6], Board[5][7] }, 24));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[7][0], Board[8][0], Board[8][1] }, 19));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][4], Board[6][5], Board[7][5] }, 6));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[8][6], Board[8][7] }, 14));
        constraints.Add(new AllCellsSumToTargetConstraint(new[] { Board[6][7], Board[6][8], Board[7][8] }, 13));

        // Add row unique constraints
        for (var rowIndex = 0; rowIndex < 9; rowIndex++)
        {
            constraints.Add(new EachDigitRepresentedOnceConstraint(Board.Columns.Select(c => c[rowIndex])));
        }

        // Add column unique constraints
        foreach (var column in Board.Columns)
        {
            constraints.Add(new EachDigitRepresentedOnceConstraint(column.Cells));
        }

        // Add sub-grid unique constraints
        for (var leftAnchor = 0; leftAnchor < 9; leftAnchor = leftAnchor + 3)
        {
            for (var topAnchor = 0; topAnchor < 9; topAnchor = topAnchor + 3)
            {
                var subGridCells = new[]
                {
                    Board[leftAnchor][topAnchor],
                    Board[leftAnchor][topAnchor + 1],
                    Board[leftAnchor][topAnchor + 2],
                    Board[leftAnchor + 1][topAnchor],
                    Board[leftAnchor + 1][topAnchor + 1],
                    Board[leftAnchor + 1][topAnchor + 2],
                    Board[leftAnchor + 2][topAnchor],
                    Board[leftAnchor + 2][topAnchor + 1],
                    Board[leftAnchor + 2][topAnchor + 2],
                };

                constraints.Add(new EachDigitRepresentedOnceConstraint(subGridCells));
            }
        }

        var stopwatch = new Stopwatch();
        stopwatch.Start();
        await Solve(0, 0, constraints.ToArray(), stopwatch);
        stopwatch.Stop();

        StateHasChanged();
    }

    private async Task<bool> Solve(int columnIndex, int rowIndex, IConstraint[] constraints, Stopwatch stopwatch)
    {
        if (columnIndex == 9)
        {
            return true;
        }

        if (Board[columnIndex][rowIndex].ValueType == Domain.ValueType.Fixed)
        {
            if (rowIndex == 8)
                return await Solve(columnIndex + 1, 0, constraints, stopwatch);
            else
                return await Solve(columnIndex, rowIndex + 1, constraints, stopwatch);
        }

        for (var guess = 1; guess <= 9; guess++)
        {
            Board[columnIndex][rowIndex].Guess(guess);
            if (stopwatch.ElapsedMilliseconds > 2_000)
            {
                StateHasChanged();
                stopwatch.Restart();
                await Task.Delay(1);
            }
            if (constraints.All(c => c.IsValid()))
            {
                if (rowIndex == 8)
                {
                    if (await Solve(columnIndex + 1, 0, constraints, stopwatch))
                        return true;
                }
                else
                {
                    if (await Solve(columnIndex, rowIndex + 1, constraints, stopwatch))
                        return true;
                }
            }
        }

        Board[columnIndex][rowIndex].Clear();
        return false;
    }
}
